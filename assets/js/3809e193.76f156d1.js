"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[304],{3905:function(t,e,r){r.d(e,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function a(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var c=n.createContext({}),s=function(t){var e=n.useContext(c),r=e;return t&&(r="function"==typeof t?t(e):a(a({},e),t)),r},p=function(t){var e=s(t.components);return n.createElement(c.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,o=t.mdxType,i=t.originalType,c=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),d=s(r),m=o,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(f,a(a({ref:e},p),{},{components:r})):n.createElement(f,a({ref:e},p))}));function m(t,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=r.length,a=new Array(i);a[0]=d;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l.mdxType="string"==typeof t?t:o,a[1]=l;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9207:function(t,e,r){r.r(e),r.d(e,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],l={sidebar_label:"Compilation (1 min)"},c="Project compilation",s={unversionedId:"tutorials/guides/compiling",id:"tutorials/guides/compiling",title:"Project compilation",description:"In order to compile your project:",source:"@site/docs/tutorials/guides/compiling.md",sourceDirName:"tutorials/guides",slug:"/tutorials/guides/compiling",permalink:"/protostar/docs/tutorials/guides/compiling",editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/tutorials/guides/compiling.md",tags:[],version:"current",frontMatter:{sidebar_label:"Compilation (1 min)"},sidebar:"tutorials",previous:{title:"Project initialization (1 min)",permalink:"/protostar/docs/tutorials/project-initialization"},next:{title:"Dependencies (3 min)",permalink:"/protostar/docs/tutorials/guides/dependencies-management"}},p={},u=[{value:"Output directory",id:"output-directory",level:3},{value:"Cairo-lang version",id:"cairo-lang-version",level:3},{value:"Additional source directories",id:"additional-source-directories",level:3}],d={toc:u};function m(t){var e=t.components,r=(0,o.Z)(t,a);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"project-compilation"},"Project compilation"),(0,i.kt)("p",null,"In order to compile your project:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Specify contracts and their files in ",(0,i.kt)("inlineCode",{parentName:"li"},"protostar.toml"),"."),(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"protostar build"),".")),(0,i.kt)("h1",{id:"specifying-contracts-and-their-files"},"Specifying contracts and their files"),(0,i.kt)("p",null,"Protostar needs to know how to build contracts from Cairo files. Each Cairo file that contains a function that define a contract interface should be included in a contract configuration. Functions that use the following decorators define a contract interface:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://starknet.io/docs/hello_starknet/intro.html"},(0,i.kt)("inlineCode",{parentName:"a"},"@external"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://starknet.io/docs/hello_starknet/intro.html"},(0,i.kt)("inlineCode",{parentName:"a"},"@view"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://starknet.io/docs/hello_starknet/l1l2.html?highlight=l1_handler"},(0,i.kt)("inlineCode",{parentName:"a"},"@l1_handler")))),(0,i.kt)("p",null,"The following configuration tells Protostar to create two contracts \u2014 'foo' and 'bar'."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="protostar.toml"',title:'"protostar.toml"'},'# ...\n\n["protostar.contracts"]\nfoo = [\n    "./src/main.cairo",\n]\nbar = [\n    "./src/main.cairo",\n]\n')),(0,i.kt)("h1",{id:"compiling-your-project"},"Compiling your project"),(0,i.kt)("p",null,"Once you specified contract configurations, run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ protostar build\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console",metastring:'title="A compilation result."',title:'"A',compilation:!0,'result."':!0},"$ ls ./build\nbar.json     bar_abi.json foo.json     foo_abi.json\n")),(0,i.kt)("h3",{id:"output-directory"},"Output directory"),(0,i.kt)("p",null,"By default, Protostar uses a ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," directory as a compilation destination. However, you can specify a custom directory by running ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," command with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--output")," flag:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"protostar build --output out\n")),(0,i.kt)("h3",{id:"cairo-lang-version"},"Cairo-lang version"),(0,i.kt)("p",null,"Protostar ships with its own ",(0,i.kt)("a",{parentName:"p",href:"https://pypi.org/project/cairo-lang/"},"cairo-lang"),". You don't have to ",(0,i.kt)("a",{parentName:"p",href:"https://www.cairo-lang.org/docs/quickstart.html"},"set up the environment"),". If you want to check what Cairo version Protostar uses to compile your project, run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cairo"},"$ protostar -v\nProtostar version: 0.1.0\nCairo-lang version: 0.8.0\n")),(0,i.kt)("h3",{id:"additional-source-directories"},"Additional source directories"),(0,i.kt)("p",null,"You can specify additional import search path by using ",(0,i.kt)("inlineCode",{parentName:"p"},"--cairo-path")," flag."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ protostar build --cairo-path=modules cairo_libs\n")))}m.isMDXComponent=!0}}]);